RailsModelFaker
===============

A simple method for adding automatic fake record generation to Ruby on Rails
via a plugin.

Installation:

  script/plugin install git://github.com/theworkinggroup/rails_model_faker


Example
=======

Adding support to an existing model is easy:

  class MyModel < ActiveRecord::Base
    can_fake :name, :with => lambda { Faker::Name.name }
  end

An alternative syntax is to append a block to the can_fake call:

  class MyModel < ActiveRecord::Base
    can_fake :name do
      Faker::Name.name
    end
  end

Multiple fields can also be faked with a single call:

  class MyModel < ActiveRecord::Base
    can_fake :work_email, :home_email do
      Faker::Internet.email
    end
  end

Any related model can be faked without any special options:

  class MyModel < ActiveRecord::Base
    belongs_to :account
    can_fake :account
  end

This also works for associations:

  class MyModel < ActiveRecord::Base
    has_many :accounts
  end

  fake = MyModel.create_fake
  fake_account = fake.accounts.create_fake

Using a fake-capable model is straightforward either by a direct call, or
by an intermediate step:

  # Prepare a fake model
  fake = MyModel.build_fake
  # Equivalent method using fake_params
  fake = MyModel.new(MyModel.fake_params)
   
  # Create an instance of a fake model
  fake = MyModel.create_fake
  # Equivalent method using fake_params
  fake = MyModel.create(MyModel.fake_params)

  # Create an instance of a fake model and throw exceptions on a
  # validation failure.
  fake = MyModel.create_fake!
  # Equivalent method using fake_params
  fake = MyModel.create!(MyModel.fake_params)

In all cases, options can be passed in to the various methods to seed
the fake with some pre-defined data:

  fake = MyModel.create_fake(:name => 'Test')

Any keys that are defined will not be re-populated.

All models can be interrogated as to their faking capability:

  MyModel.can_fake?(:name) # => true

Copyright (c) 2009 The Working Group (http://twg.ca/)
